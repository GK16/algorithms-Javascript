我们常见的石子合并问题一般就三种

第一种

n堆石子，每次合并的花费为两堆石子数目之和，求怎样合并可以使得合并为一整堆石子的总花费最少

实际上这就是HUfffman编码的变形，运用贪心策略，每次找出最小的两堆合并即可。

第二种

描述与第一种很相似，只不过每次合并只能合并相邻的两堆石子

那么贪心策略就不一定有用，局部最优的结果不一定是全局最优

那么我们就要考虑了，全局最优的子结构也应当是最优的。那么，我们就要考虑动态规划了，

状态转移方程：

dp[i][j] = min(dp[i][j],d[i][k]+dp[k+1][j]+sum[j]-sim[i])

解释一下，dp[i][j]表示合并第i堆到第j堆石子的最小花费，k的取值范围为i到j之间，表示分割点，例如1-3就可以分为1-2与3-3，sum【i】表示前i堆石子的总重量

初始化dp[i][i]为0，其他为无穷大

第三种：

环形

n堆石子围成环状，求解

那么我们的dp数组的含义就要进行改变了，dp[i][j]的意义以第i堆石子为起点，合并j堆石子的最小（大）花费

sum的含义为第i堆为起点，后j堆的总和

最终遍历dp[i][n]（1<=i<=n）

找到最小（大）的值